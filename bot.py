import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError
import os
from dotenv import load_dotenv

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]

def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рдиреНрд╕ рдХреЗ рд▓рд┐рдП рд╣реИ!")
            return
        return await func(update, context)
    return wrapper

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("рд╣рд╛рдп! рдореИрдВ MyVideoPoster рдмреЙрдЯ рд╣реВрдБред /postvideo рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╡реАрдбрд┐рдпреЛ рдФрд░ рдердВрдмрдиреЗрд▓ рдкреЛрд╕реНрдЯ рдХрд░реЗрдВред")

@admin_only
async def post_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 3:
        await update.message.reply_text(
            "рдЙрдкрдпреЛрдЧ: /postvideo <рдореВрд╡реА_рдХрд╛_рдирд╛рдо> <рд╡реАрдбрд┐рдпреЛ_file_id> <рдердВрдмрдиреЗрд▓_file_id>"
        )
        return

    movie_name, video_file_id, thumbnail_file_id = context.args

    try:
        await context.bot.send_video(
            chat_id=CHANNEL_ID,
            video=video_file_id,
            thumb=thumbnail_file_id,
            caption=f"ЁЯОм {movie_name}",
            supports_streaming=True
        )
        await update.message.reply_text(f"рд╡реАрдбрд┐рдпреЛ '{movie_name}' рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ {CHANNEL_ID} рдкрд░ рдкреЛрд╕реНрдЯ рд╣реЛ рдЧрдпрд╛!")
    except TelegramError as e:
        await update.message.reply_text(f"рдПрд░рд░: {e.message}")
        logger.error(f"рд╡реАрдбрд┐рдпреЛ рдкреЛрд╕реНрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"рдЕрдкрдбреЗрдЯ {update} рдХреЗ рдХрд╛рд░рдг рддреНрд░реБрдЯрд┐: {context.error}")
    if update:
        await update.message.reply_text("рдХреБрдЫ рдЧрд▓рдд рд╣реБрдЖред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("postvideo", post_video))
    application.add_error_handler(error_handler)
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
