import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError
import os
from dotenv import load_dotenv

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§∏‡•á‡§ü‡§Ö‡§™
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£ ‡§ö‡§∞ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (.env ‡§´‡§æ‡§á‡§≤ ‡§∏‡•á)
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]

# ‡§è‡§°‡§Æ‡§ø‡§® ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•á‡§ï‡•ã‡§∞‡•á‡§ü‡§∞
def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§®‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à!")
            return
        return await func(update, context)
    return wrapper

# /start ‡§ï‡§Æ‡§æ‡§Ç‡§°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‡§π‡§æ‡§Ø! ‡§Æ‡•à‡§Ç MyVideoPoster ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å‡•§ /postvideo ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§î‡§∞ ‡§•‡§Ç‡§¨‡§®‡•á‡§≤ ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§")

# /postvideo ‡§ï‡§Æ‡§æ‡§Ç‡§°
@admin_only
async def post_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 3:
        await update.message.reply_text(
            "‡§â‡§™‡§Ø‡•ã‡§ó: /postvideo <‡§Æ‡•Ç‡§µ‡•Ä_‡§ï‡§æ_‡§®‡§æ‡§Æ> <‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã_file_id> <‡§•‡§Ç‡§¨‡§®‡•á‡§≤_file_id>"
        )
        return

    movie_name, video_file_id, thumbnail_file_id = context.args

    try:
        # ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•ã ‡§ö‡•à‡§®‡§≤ ‡§™‡§∞ ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§•‡§Ç‡§¨‡§®‡•á‡§≤ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≠‡•á‡§ú‡•á‡§Ç
        await context.bot.send_video(
            chat_id=CHANNEL_ID,
            video=video_file_id,
            thumb=thumbnail_file_id,
            caption=f"üé¨ {movie_name}",
            supports_streaming=True
        )
        await update.message.reply_text(f"‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã '{movie_name}' ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï {CHANNEL_ID} ‡§™‡§∞ ‡§™‡•ã‡§∏‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ!")
    except TelegramError as e:
        await update.message.reply_text(f"‡§è‡§∞‡§∞: {e.message}")
        logger.error(f"‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")

# ‡§è‡§∞‡§∞ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"‡§Ö‡§™‡§°‡•á‡§ü {update} ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {context.error}")
    if update:
        await update.message.reply_text("‡§ï‡•Å‡§õ ‡§ó‡§≤‡§§ ‡§π‡•Å‡§Ü‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")

def main():
    # ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
    application = Application.builder().token(BOT_TOKEN).build()

    # ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("postvideo", post_video))

    # ‡§è‡§∞‡§∞ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    application.add_error_handler(error_handler)

    # ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
