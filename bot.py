import os
import threading
import asyncio
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- Configuration ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_USER_ID", 0))
CHANNEL_ID = os.environ.get("CHANNEL_ID")
PORT = int(os.environ.get('PORT', 8080))

# --- Flask App (Gunicorn ‡§á‡§∏‡•á ‡§ö‡§≤‡§æ‡§è‡§ó‡§æ) ---
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "Poster Bot is running!"

# --- Telegram Bot Logic ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sends a welcome message."""
    await update.message.reply_text(
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ Video Poster Bot ‡§π‡•Ç‡§Å‡•§\n"
        "‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç: /postvideo <‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ> <‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã_id> <‡§•‡§Ç‡§¨‡§®‡•á‡§≤_id>"
    )

async def post_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Posts a video with a custom thumbnail."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§Ø‡•á‡§ó‡§æ, ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§")
        return

    args = context.args
    if len(args) < 3:
        await update.message.reply_text(
            "‡§ó‡§≤‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü! /postvideo \"‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ\" <‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã_id> <‡§•‡§Ç‡§¨‡§®‡•á‡§≤_id>"
        )
        return
    
    thumbnail_file_id = args[-1]
    video_file_id = args[-2]
    movie_name = " ".join(args[:-2])

    try:
        await context.bot.send_video(
            chat_id=CHANNEL_ID,
            video=video_file_id,
            thumb=thumbnail_file_id,
            caption=f"üé¨ **{movie_name}**\n\n*Join for more updates!*",
            parse_mode='Markdown'
        )
        await update.message.reply_text(f"‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! '{movie_name}' ‡§Ü‡§™‡§ï‡•á ‡§ö‡•à‡§®‡§≤ ‡§™‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•ã‡§∏‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‚úÖ")
    except Exception as e:
        print(f"Error posting video: {e}")
        await update.message.reply_text(f"‡§ï‡•Å‡§õ ‡§è‡§∞‡§∞ ‡§Ü ‡§ó‡§Ø‡§æ! üò¢\n‡§è‡§∞‡§∞: {e}")

# --- Bot Runner Function (‡§Ø‡§π ‡§è‡§ï ‡§Ö‡§≤‡§ó ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡•á‡§ó‡§æ) ---
def run_bot_polling():
    """Sets up and runs the bot's polling loop."""
    print("Bot polling thread started.")
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("postvideo", post_video))
    
    print("Poster Bot is starting polling...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

# --- Main Execution ---
# ‡§ú‡§¨ Gunicorn ‡§á‡§∏ ‡§´‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§ó‡§æ, ‡§§‡•ã ‡§Ø‡§π ‡§ï‡•ã‡§° ‡§ö‡§≤‡•á‡§ó‡§æ
print("Starting bot in a background thread...")
bot_thread = threading.Thread(target=run_bot_polling, daemon=True)
bot_thread.start()

# Gunicorn ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, Render ‡§ï‡•Ä Start Command ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§π‡•ã‡§ó‡§æ
# For local testing, you could add:
# if __name__ == "__main__":
#     from waitress import serve
#     serve(flask_app, host='0.0.0.0', port=PORT)
