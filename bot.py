import os
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- Configuration ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_USER_ID", 0))
CHANNEL_ID = os.environ.get("CHANNEL_ID")
PORT = int(os.environ.get('PORT', 8080))
# Render.com ‡§Ü‡§™‡§ï‡•ã ‡§è‡§ï URL ‡§¶‡•á‡§§‡§æ ‡§π‡•à, ‡§â‡§∏‡•á ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç ‡§Ø‡§æ Environment Variable ‡§∏‡•á ‡§≤‡•á‡§Ç
WEBHOOK_URL = os.environ.get("RENDER_EXTERNAL_URL") 

# Configuration validation
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")
if not CHANNEL_ID:
    raise ValueError("CHANNEL_ID environment variable is required")

# --- Telegram Bot Logic ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sends a welcome message."""
    await update.message.reply_text(
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ Video Poster Bot ‡§π‡•Ç‡§Å‡•§\n"
        "‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç: /postvideo <‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ> <‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã_id> <‡§•‡§Ç‡§¨‡§®‡•á‡§≤_id>"
    )

async def post_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Posts a video with a custom thumbnail."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§Ø‡•á‡§ó‡§æ, ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§")
        return

    args = context.args
    if len(args) < 3:
        await update.message.reply_text(
            "‡§ó‡§≤‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü! /postvideo \"‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ\" <‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã_id> <‡§•‡§Ç‡§¨‡§®‡•á‡§≤_id>"
        )
        return
    
    thumbnail_file_id = args[-1]
    video_file_id = args[-2]
    movie_name = " ".join(args[:-2])

    try:
        await context.bot.send_video(
            chat_id=CHANNEL_ID,
            video=video_file_id,
            thumb=thumbnail_file_id,
            caption=f"üé¨ **{movie_name}**\n\n*Join for more updates!*",
            parse_mode='Markdown'
        )
        await update.message.reply_text(f"‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! '{movie_name}' ‡§Ü‡§™‡§ï‡•á ‡§ö‡•à‡§®‡§≤ ‡§™‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•ã‡§∏‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‚úÖ")
    except Exception as e:
        print(f"Error posting video: {e}")
        await update.message.reply_text(f"‡§ï‡•Å‡§õ ‡§è‡§∞‡§∞ ‡§Ü ‡§ó‡§Ø‡§æ! üò¢\n‡§è‡§∞‡§∞: {e}")

# --- Bot and Flask Setup ---
async def main():
    """Sets up the bot application and webhook."""
    # PTB Application ‡§ï‡•ã ‡§¨‡§®‡§æ‡§è‡§Ç
    application = Application.builder().token(TOKEN).build()

    # Handlers ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("postvideo", post_video))
    
    # Webhook ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    if WEBHOOK_URL:
        await application.bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}")
        print(f"Webhook set to {WEBHOOK_URL}/{TOKEN}")
    else:
        print("WEBHOOK_URL not found, running in polling mode for local testing.")
        # ‡§Ø‡§π ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§≤‡•ã‡§ï‡§≤ ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à, Render ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤‡•á‡§ó‡§æ
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
        return

    # ‡§á‡§∏ ‡§è‡§™‡•ç‡§≤‡•Ä‡§ï‡•á‡§∂‡§® ‡§ï‡•ã ‡§ó‡•ç‡§≤‡•ã‡§¨‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø Flask ‡§á‡§∏‡•á ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞ ‡§∏‡§ï‡•á
    # (‡§Ø‡§π ‡§è‡§ï ‡§Ü‡§∏‡§æ‡§® ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§π‡•à, ‡§¨‡§°‡§º‡•á ‡§ê‡§™‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§î‡§∞ ‡§¨‡•á‡§π‡§§‡§∞ ‡§§‡§∞‡•Ä‡§ï‡•á ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç)
    flask_app.ptb_app = application
    
    # ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§¨‡•â‡§ü ‡§†‡•Ä‡§ï ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à
    async with application:
        await application.start()
        # Flask ‡§ê‡§™ ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§è‡§Ç (‡§Ø‡§π Gunicorn ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ, ‡§á‡§∏‡§≤‡§ø‡§è ‡§Ø‡§π ‡§≤‡§æ‡§á‡§® Render ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤‡•á‡§ó‡•Ä)
        # flask_app.run(host='0.0.0.0', port=PORT, debug=False)
        # We need to keep the main async function running
        await asyncio.Event().wait()


# --- Flask App ---
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "Poster Bot is running with Webhooks!"

@flask_app.route(f'/{TOKEN}', methods=['POST'])
async def telegram_webhook():
    """‡§Ø‡§π ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§∏‡•á ‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∏‡§≠‡•Ä ‡§Ö‡§™‡§°‡•á‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    update_data = request.get_json()
    update = Update.de_json(data=update_data, bot=flask_app.ptb_app.bot)
    await flask_app.ptb_app.process_update(update)
    return 'ok'

if __name__ == "__main__":
    # ‡§®‡§Ø‡§æ event loop ‡§¨‡§®‡§æ‡§è‡§Ç ‡§î‡§∞ main() ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ö‡§≤‡§æ‡§è‡§Ç
    loop = asyncio.get_event_loop()
    if loop.is_running():
        # ‡§Ö‡§ó‡§∞ ‡§≤‡•Ç‡§™ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à (‡§ú‡•à‡§∏‡•á ‡§ï‡•Å‡§õ IDEs ‡§Æ‡•á‡§Ç), ‡§§‡•ã ‡§è‡§ï ‡§®‡§Ø‡§æ task ‡§¨‡§®‡§æ‡§è‡§Ç
        loop.create_task(main())
    else:
        # ‡§µ‡§∞‡§®‡§æ, ‡§≤‡•Ç‡§™ ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§è‡§Ç
        loop.run_until_complete(main())
