import os
import threading
import asyncio
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import uvicorn

# --- Configuration ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_USER_ID", 0))
CHANNEL_ID = os.environ.get("CHANNEL_ID")
PORT = int(os.environ.get('PORT', 8080))

# --- Flask App (Uvicorn ‡§á‡§∏‡•á ‡§ö‡§≤‡§æ‡§è‡§ó‡§æ) ---
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "Poster Bot is running!"

# --- Telegram Bot Logic ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sends a welcome message."""
    await update.message.reply_text(
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ Video Poster Bot ‡§π‡•Ç‡§Å‡•§\n"
        "‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç: /postvideo <‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ> <‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã_id> <‡§•‡§Ç‡§¨‡§®‡•á‡§≤_id>"
    )

async def post_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Posts a video with a custom thumbnail."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§Ø‡•á‡§ó‡§æ, ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§")
        return

    args = context.args
    if len(args) < 3:
        await update.message.reply_text(
            "‡§ó‡§≤‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü! /postvideo \"‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ\" <‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã_id> <‡§•‡§Ç‡§¨‡§®‡•á‡§≤_id>"
        )
        return
    
    thumbnail_file_id = args[-1]
    video_file_id = args[-2]
    movie_name = " ".join(args[:-2])

    try:
        await context.bot.send_video(
            chat_id=CHANNEL_ID,
            video=video_file_id,
            thumb=thumbnail_file_id,
            caption=f"üé¨ **{movie_name}**\n\n*Join for more updates!*",
            parse_mode='Markdown'
        )
        await update.message.reply_text(f"‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! '{movie_name}' ‡§Ü‡§™‡§ï‡•á ‡§ö‡•à‡§®‡§≤ ‡§™‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•ã‡§∏‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‚úÖ")
    except Exception as e:
        print(f"Error posting video: {e}")
        await update.message.reply_text(f"‡§ï‡•Å‡§õ ‡§è‡§∞‡§∞ ‡§Ü ‡§ó‡§Ø‡§æ! üò¢\n‡§è‡§∞‡§∞: {e}")

# --- Main Execution Block (‡§®‡§Ø‡§æ ‡§î‡§∞ ‡§¨‡•á‡§π‡§§‡§∞ ‡§§‡§∞‡•Ä‡§ï‡§æ) ---
async def run_bot_polling():
    """Bot ‡§ï‡•ã ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ö‡§≤‡§æ‡§§‡§æ ‡§π‡•à"""
    print("Bot polling task started.")
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("postvideo", post_video))
    
    print("Poster Bot is starting polling...")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

async def main():
    """Flask ‡§î‡§∞ Bot ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§æ‡§• ‡§ö‡§≤‡§æ‡§§‡§æ ‡§π‡•à"""
    print("Main function started.")
    
    # Uvicorn ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§ï‡•á Flask ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ö‡§≤‡§æ‡§è‡§Ç
    server_config = uvicorn.Config(flask_app, host="0.0.0.0", port=PORT)
    server = uvicorn.Server(server_config)
    
    # ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§æ‡§• ‡§ö‡§≤‡§æ‡§è‡§Ç
    await asyncio.gather(
        server.serve(),
        run_bot_polling()
    )

if __name__ == "__main__":
    print("Starting application...")
    asyncio.run(main())
