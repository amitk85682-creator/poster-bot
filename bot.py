import os
import threading
import asyncio
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- Configuration ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_USER_ID", 0))
CHANNEL_ID = os.environ.get("CHANNEL_ID")
PORT = int(os.environ.get('PORT', 8080))

# --- Flask App for Keep-Alive ---
flask_app = Flask('')
@flask_app.route('/')
def home():
    return "Poster Bot is running!"

def run_flask():
    from waitress import serve
    serve(flask_app, host='0.0.0.0', port=PORT)

# --- Telegram Bot Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sends a welcome message when the /start command is issued."""
    await update.message.reply_text(
        "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ Video Poster Bot рд╣реВрдБред\n"
        "рдореБрдЭреЗ рдореВрд╡реА рдХрд╛ рдирд╛рдо, рд╡реАрдбрд┐рдпреЛ рдХрд╛ file_id, рдФрд░ рдердВрдмрдиреЗрд▓ рдХрд╛ file_id рджреЗрдВ, рдФрд░ рдореИрдВ рдЗрд╕реЗ рдЖрдкрдХреЗ рдЪреИрдирд▓ рдкрд░ рдкреЛрд╕реНрдЯ рдХрд░ рджреВрдБрдЧрд╛ред\n\n"
        "рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ: /postvideo <рдореВрд╡реА рдХрд╛ рдирд╛рдо> <рд╡реАрдбрд┐рдпреЛ_id> <рдердВрдмрдиреЗрд▓_id>"
    )

async def post_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Posts a video with a custom thumbnail to the specified channel."""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("рдорд╛рдлрд╝ рдХреАрдЬрд┐рдпреЗрдЧрд╛, рдпрд╣ рдХрдорд╛рдВрдб рд╕рд┐рд░реНрдл рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return

    args = context.args
    if not args or len(args) < 3:
        await update.message.reply_text(
            "рдЧрд▓рдд рдлреЙрд░реНрдореЗрдЯ! рдРрд╕реЗ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ:\n"
            "/postvideo \"рдореВрд╡реА рдХрд╛ рдирд╛рдо\" <рд╡реАрдбрд┐рдпреЛ_file_id> <рдердВрдмрдиреЗрд▓_file_id>\n\n"
            "рдзреНрдпрд╛рди рджреЗрдВ: рдЕрдЧрд░ рдореВрд╡реА рдХреЗ рдирд╛рдо рдореЗрдВ рд╕реНрдкреЗрд╕ рд╣реИ, рддреЛ рдЙрд╕реЗ \" \" рдХреЗ рдЕрдВрджрд░ рд▓рд┐рдЦреЗрдВред"
        )
        return

    # The last two arguments are file IDs, everything before is the movie name
    thumbnail_file_id = args[-1]
    video_file_id = args[-2]
    movie_name = " ".join(args[:-2])

    try:
        await context.bot.send_video(
            chat_id=CHANNEL_ID,
            video=video_file_id,
            thumb=thumbnail_file_id,
            caption=f"ЁЯОм **{movie_name}**\n\n*Join for more updates!*",
            parse_mode='Markdown'
        )
        await update.message.reply_text(f"рдмрдврд╝рд┐рдпрд╛! '{movie_name}' рдЖрдкрдХреЗ рдЪреИрдирд▓ рдкрд░ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреЛрд╕реНрдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИред тЬЕ")
    except Exception as e:
        print(f"Error posting video: {e}")
        await update.message.reply_text(f"рдХреБрдЫ рдПрд░рд░ рдЖ рдЧрдпрд╛! рд╡реАрдбрд┐рдпреЛ рдкреЛрд╕реНрдЯ рдирд╣реАрдВ рд╣реЛ рдкрд╛рдпрд╛ред ЁЯШв\n\nрдПрд░рд░: {e}")

# --- Main Execution Block ---
async def main():
    """Starts the bot."""
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("postvideo", post_video))

    print("Poster Bot is starting polling...")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    asyncio.run(main())
